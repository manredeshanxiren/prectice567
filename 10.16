game.c
#include<stdio.h>

#include "game.h"

//初始化棋盘的函数
void Initboard(char board[ROW][COL], int row, int col)
{
	int i;
	int j;
	for(i = 0; i <= ROW; i++)
    {

		 for (j = 0; j <= COL; j++)
		 {
			 board[i][j] = ' ';
		 }
	}
}
//棋盘初始化函数
void dispalyboard(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < ROW; i++)
	{
		for (int j = 0; j < COL; j++)
		{
			printf_s(" %c ", board[i][j]);
			if(i <= ROW -1)
			printf_s("|");
		}
		printf_s("\n");
		if (i < ROW - 1)
		{
			for (int j = 0; j < COL; j++)
			{
				printf_s("---");
				if (i < COL - 1)
					printf_s("|");
			}
			printf_s("\n");
		}
		
	}

}
//玩家下棋函数
void playermove(char board[ROW][COL], int row, int col)
{
	printf_s("请输入坐标：>\n");
	printf_s("请输入下棋的坐标：>\n");
	int x = 0;
	int y = 0;
	while (1)
	{
		scanf_s("%d%d", &x, &y);
		if (x > 0 && x <= ROW && y <= COL && y > 0)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf_s("坐标已被占用，请重新输入：>");
			}
		}
		else
		{
			printf_s("非法输入，请重新输入：>");
		}
	}
}//电脑下棋函数
void PCmove(char board[ROW][COL], int row, int col) 
{
	printf_s("电脑下棋：>\n");
	while (1)
	{
		int x = rand() % row;//规定范围
		int y = rand() % col;
		if (board[x][y] == ' ')//判断是否被占用
		{
			board[x][y] = '&';
			break;
		}
	}

}
//判断是否摆满
int IsFull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < row; j++)
		{
			return 0;
		}

	}
	return 1;
}
char Iswin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	//行判断
	for (i = 0; i < row; i++)
	{
		for (j = 1; j < col; j++)
		{
			if (board[i][j - 1] == board[i][j] && j < col - 1)
			{
				continue;
			}
			
			else if (i == row - 1 && board[i][j] == board[i][j + 1])
			{
				return board[i][j];
			}
			else
			{
				break;
			}
		}
	}
	//列
	for (i = 1; i < row; i++)
	{
		for (j = 1; j < col; j++)
		{
			if (board[j - 1][i - 1] == board[j][i] && j < col - 1)
			{
				continue;
			}
			else
			{
				break;
			}
			if (i == j - 1 && j == row - 1 && board[j][i] == board[j + 1][i + 1])
			{
				return board[0][0];
			}
		}
	}
	//对角线
	for (i = 1; i < row; i++)
	{
		if (board[i - 1][i - 1] == board[i][i])
		{
			continue;
		}
		else
		{
			break;
		}
		return board[1][1];
	}
	for (i = row; i > 0; i--)
	{
		for (j = 1; j < row; j++)
		{
			if (board[j - 1][i] == board[j][i - 1])
			{
				continue;
			}
			else
			{
				break;
			}
			return board[row][0];
		}
	}
	//判断平局
	int ret = IsFull(board, row, col);
	if (ret == 1)
	{
		return 'Q';
	}
	//继续
	return 'C';
}














game.h
#pragma once
//头文件的包含
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
//符号的声明
#define ROW 3
#define COL 3
//函数的声明
//数组的初始化
void Initboard(char board[ROW][COL], int row, int col);
//打印棋盘的函数
void dispalyboard(char board[ROW][COL], int row, int col);
//玩家下棋的函数
void playermove(char board[ROW][COL], int row, int col);
//电脑下棋
void PCmove(char board[ROW][COL], int row, int col);
//判断输赢的函数
//玩家赢‘*’
//电脑赢‘#’
//平局  ‘Q’
//游戏继续‘C’
char Iswin(char board[ROW][COL], int row, int col);


test.c

#include "game.h"
void menu()
{
	printf_s("***************************************\n");
	printf_s("************** 1. play    *************\n");
	printf_s("************** 0. exit    *************\n");
	printf_s("***************************************\n");
}
void game()
{
	char ret = 0;
	//存储数据，二维数组
	char board[ROW][COL];
	//初始化数组
	Initboard(board, ROW, COL);
	//打印棋盘-本质是打印数组内容
	dispalyboard(board, ROW, COL);
	while (1)
	{
		//玩家下棋
		playermove(board, ROW, COL);
		dispalyboard(board, ROW, COL);
		ret = Iswin(board, ROW, COL);
		//电脑下棋
		PCmove(board, ROW, COL);
		dispalyboard(board, ROW, COL);
		ret = Iswin(board, ROW, COL);
		if (ret != 'C')
			break;
	}
	if (ret == '*')
	{
		printf_s("玩家赢！\n");
	}
	else if (ret == '#')
	{
		printf_s("电脑赢！\n");
	}
	else
	{
		printf_s("平局~\n");
	}
	dispalyboard(board, ROW, COL);
}

int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do 
	{
		menu();
		printf_s("请选择：>");
		scanf_s("%d", &input);
		switch (input)
		{
		case 1:
			printf_s("《开始游戏》\n");
			game();
			break;
		case 0:
			printf_s("《游戏结束》\n");
			break;
		default:
			printf_s("《重新输入》\n");
			break;
		}
	} while (input);
	return 0;
}



